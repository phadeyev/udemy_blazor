@page "/lifecycle"

@using System.Threading

<h1>Lifecycle</h1>

<div class="border">
    <LifecycleComponent CountValue="@currentCount"/>
</div>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br /> @Count<button @onclick=StartCountDown>Start Countdown</button>
<br />
@foreach (var item in EventType)
{
    @item
    <hr />
}

@code {
    List<string> EventType = new List<string>();
    private int currentCount = 0;
    private int Count { get; set; } = 5;
    private void IncrementCount()
    {
        currentCount++;
    }
    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
    }
    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet is called");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add("OnAfterRender is called");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
    }
    protected override bool ShouldRender()
        {
            EventType.Add("ShouldRender is called");
            return base.ShouldRender();
        }

    void StartCountDown()
    {
        var timer = new Timer(TimeCallback, null, 1000, 1000);
    }

    void TimeCallback(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}